#pragma checksum "C:\Users\JGLASS4\source\repos\MonitoringConsole\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "02338080af35089106d8a2511e7ef44bc266f5ff"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(MonitoringConsole.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
namespace MonitoringConsole.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\JGLASS4\source\repos\MonitoringConsole\Pages\_ViewImports.cshtml"
using MonitoringConsole;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"02338080af35089106d8a2511e7ef44bc266f5ff", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9fd1d0852c2e94fcee27dda80f9bafe4c994161a", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Users\JGLASS4\source\repos\MonitoringConsole\Pages\Index.cshtml"
  
    ViewData["Title"] = "Home page";

#line default
#line hidden
#nullable disable
            WriteLiteral("<br />\r\n<br />\r\n<h1>Monitoring Console</h1>\r\n<br />\r\n<br />\r\n<div class=\"buttonArea\">\r\n");
            WriteLiteral(@"    <button id=""setup"">Set up workspace</button>

    <button id=""saveLog"">Save Log</button>
    <button id=""terminate"">Terminate Environment</button>
</div>

<div class=""monitorSpace"">
    <table id=""displayArea"">
        <thead>
            <tr>
                <th>Notifications</th>
                <th>Date/time logged</th>
                <th>Workspace owner</th>
                <th>Workspace Id</th>
                <th>Attacker IP</th>
            </tr>
        </thead>
        <tbody id=""placeToInsert"">
        </tbody>

    </table>
</div>



");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>

        var placeToInsert = document.getElementById(""placeToInsert"");
        var rowCount = 1; //pop client message indexing starts from 1.  rowCount holds index of next message to be read
        var attackData = {
            attackerIP: """",
            userName: """",
            workSpaceId: """"
        };

        var populateDisplay = async function () {
            let url = '");
#nullable restore
#line 53 "C:\Users\JGLASS4\source\repos\MonitoringConsole\Pages\Index.cshtml"
                  Write(Url.Content("~/api/KeyEvents/"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' + rowCount; //rowCount;
            await fetch(url)
                .then(data => data.json())
                .then(data => renderTable(data))
                .catch(handleNull);

            setTimeout(populateDisplay, 5000);
        };

        var renderTable = function (data) {
            let keystrokes = data[0];
            let times = data[1];
            for (let i = 0; i < data[0].length; i++) {
                if (data[0][i] != """") {
                    let row = document.createElement(""tr"");
                    if (attackData.attackerIP === """")
                        parseMessage(data[0][i]);
                    row.innerHTML = ""<td>"" + data[0][i] + ""</td><td>"" + data[1][i] + ""</td><td>"" + attackData.userName +
                        ""</td><td>"" + attackData.workSpaceId + ""</td><td>"" + attackData.attackerIP;
                    placeToInsert.append(row);
                }
            }
            rowCount += data[0].length;
            console.log(rowCount);
        ");
                WriteLiteral(@"}

        var parseMessage = function(msg) {
            if (msg.length > 39 && msg.substring(0, 39) === ""AWS Alert - possible WorkSpace attack. "") {
                let s = msg.substring(39);
                attackData.attackerIP = s.substring(0, s.indexOf(' '));
                s = s.substring(attackData.attackerIP.length + 1); //check this

                attackData.workSpaceId = s.substring(0, s.indexOf(' '));
                s = s.substring(attackData.workSpaceId.length + 1);

                attackData.userName = s;
            }
        }

        var handleNull = function () {
            alert(""Unable to connect to Pop3 server. Check server authentication permissions."");
        }

        populateDisplay();

        //terminate
        var terminate_bttn = document.getElementById(""terminate"");
        terminate_bttn.addEventListener(""click"", showPopup);

        function showPopup() {
            alert(""The workspace has been terminated."");
        }

        //setup
");
                WriteLiteral("        var setup = document.getElementById(\"setup\");\r\n        setup.addEventListener(\"click\", setupWorkspace);\r\n\r\n        function setupWorkspace() {\r\n            alert(\"here\");\r\n            let url = \'");
#nullable restore
#line 112 "C:\Users\JGLASS4\source\repos\MonitoringConsole\Pages\Index.cshtml"
                  Write(Url.Content("~/api/SetupWorkspace/"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"';
            let paramObj = {
                method: ""POST"",
                headers: {
                    ""Content-Type"": ""application/json""
                },
                body: JSON.stringify({    //later we can perform an initial GET to a service that gives us these parameters
                    DirectoryId: 'test',
                    UserName: 'test',
                    BundleId: 'test'
                })
            };

            fetch(url, paramObj)
                .then(data => data.json())
                .then(data => JSON.stringify(data))
                .then(data => alert(data));

        }


    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
