@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
<br />
<br />
<h1>Monitoring Console</h1>
<br />
<br />
<div class="buttonArea">
    @*<form action="~/SuccessPage" method="GET">
            <input type="submit" value="Set up workspace" id="setup" />
        </form>*@
    <button id="setup">Set up workspace</button>

    <button id="saveLog">Save Log</button>
    <button id="terminate">Terminate Environment</button>
</div>

<div class="monitorSpace">
    <table id="displayArea">
        <thead>
            <tr>
                <th>Notifications</th>
                <th>Date/time logged</th>
                <th>Workspace owner</th>
                <th>Workspace Id</th>
                <th>Attacker IP</th>
            </tr>
        </thead>
        <tbody id="placeToInsert">
        </tbody>

    </table>
</div>



@section Scripts
{
    <script>

        var placeToInsert = document.getElementById("placeToInsert");
        var rowCount = 1; //pop client message indexing starts from 1.  rowCount holds index of next message to be read
        var attackData = {
            attackerIP: "",
            userName: "",
            workSpaceId: ""
        };

        var populateDisplay = async function () {
            let url = '@Url.Content("~/api/KeyEvents/")' + rowCount; //rowCount;
            await fetch(url)
                .then(data => data.json())
                .then(data => renderTable(data))
                .catch(handleNull);

            setTimeout(populateDisplay, 5000);
        };

        var renderTable = function (data) {
            let keystrokes = data[0];
            let times = data[1];
            for (let i = 0; i < data[0].length; i++) {
                if (data[0][i] != "") {
                    let row = document.createElement("tr");
                    if (attackData.attackerIP === "")
                        parseMessage(data[0][i]);
                    row.innerHTML = "<td>" + data[0][i] + "</td><td>" + data[1][i] + "</td><td>" + attackData.userName +
                        "</td><td>" + attackData.workSpaceId + "</td><td>" + attackData.attackerIP;
                    placeToInsert.append(row);
                }
            }
            rowCount += data[0].length;
            console.log(rowCount);
        }

        var parseMessage = function(msg) {
            if (msg.length > 39 && msg.substring(0, 39) === "AWS Alert - possible WorkSpace attack. ") {
                let s = msg.substring(39);
                attackData.attackerIP = s.substring(0, s.indexOf(' '));
                s = s.substring(attackData.attackerIP.length + 1); //check this

                attackData.workSpaceId = s.substring(0, s.indexOf(' '));
                s = s.substring(attackData.workSpaceId.length + 1);

                attackData.userName = s;
            }
        }

        var handleNull = function () {
            alert("Unable to connect to Pop3 server. Check server authentication permissions.");
        }

        populateDisplay();

        //terminate
        var terminate_bttn = document.getElementById("terminate");
        terminate_bttn.addEventListener("click", showPopup);

        function showPopup() {
            alert("The workspace has been terminated.");
        }

        //setup
        var setup = document.getElementById("setup");
        setup.addEventListener("click", setupWorkspace);

        function setupWorkspace() {
            alert("here");
            let url = '@Url.Content("~/api/SetupWorkspace/")';
            let paramObj = {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({    //later we can perform an initial GET to a service that gives us these parameters
                    DirectoryId: 'test',
                    UserName: 'test',
                    BundleId: 'test'
                })
            };

            fetch(url, paramObj)
                .then(data => data.json())
                .then(data => JSON.stringify(data))
                .then(data => alert(data));

        }


    </script>
}